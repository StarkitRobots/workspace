#!/bin/bash
## To calibrate, init the robot, start walk and start arucoCalibration on rhio.
## After the set number of frames, the file arucoCalibration.csv will be available on the robot's env
## This scripts copies that file, starts the calibration and sends the results to the robot.

echo "A new day dawns"

host=$(ssh starkit@10.0.0.1 hostname)
robot_home=$(ssh starkit@10.0.0.1 pwd)
echo "Robot home is "$robot_home
echo "Going to perform a calibration for $host"

ARUCO_DIR="$robot_home/env/$host/arucoCalibration.csv"
MODEL_DIR="$HOME/workspace/devel_release/lib/model/"
LOCAL_DIR="$HOME/workspace/devel_release/lib/model/$host"
ENV_DIR="$HOME/workspace/env/$host"

#echo "Changing the file $ENV_DIR/rhal.json, setting pitch to 0"
#python $HOME/workspace/env/setOffset.py $ENV_DIR/rhal.json head_pitch 0 0

echo "*** Deploy-enving..."
bash deploy-env

echo "Start RhobanServer now and press enter to init"
read input

rhio 10.0.0.1 init
echo "Press enter to Ned Stark"
read input
rhio 10.0.0.1 /lowlevel/head_pitch/torqueEnable=0

echo "Set by hand the maximum neck angle (the robot must be looking its feet) and press enter..."
read input

IDEAL_PITCH=110.7
value=$(rhio 10.0.0.1 /lowlevel/head_pitch/position)
pitch=$(echo $value| cut -d'=' -f 2)
echo "Pitch is $pitch"
echo "Ideal pitch is $IDEAL_PITCH"
echo "Changing the file $ENV_DIR/rhal.json"
python $HOME/workspace/env/setOffset.py $ENV_DIR/rhal.json head_pitch $pitch $IDEAL_PITCH

echo "*** Deploy-enving..."
bash deploy-env

echo "Setting the calibration pipeline on the robot..."
## Sad fix
ssh starkit@10.0.0.1 rm $robot_home/env/$host/LocalisationTest.xml
ssh starkit@10.0.0.1 rm $robot_home/env/$host/LocalisationTest.xml
ssh starkit@10.0.0.1 rm $robot_home/env/$host/LocalisationTest.xml
ssh starkit@10.0.0.1 ln -sf $robot_home/env/common/arucoCalibEmbedded.xml $robot_home/env/$host/LocalisationTest.xml
ssh starkit@10.0.0.1 ln -sf $robot_home/env/common/arucoCalibEmbedded.xml $robot_home/env/$host/LocalisationTest.xml
ssh starkit@10.0.0.1 ln -sf $robot_home/env/common/arucoCalibEmbedded.xml $robot_home/env/$host/LocalisationTest.xml


echo "*** Restart RhobanServer, when the lowlevel is ready press enter..."
read input

echo "Press enter to walk"
read input
rhio 10.0.0.1 init
rhio 10.0.0.1 walk

echo "Hold me in the air for the pressure tare..."
read input
rhio 10.0.0.1 tare

echo "Starting the gyroTare. Make sure the robot is perfectly idle, then press enter..."
read input
rhio 10.0.0.1 gyroTare

echo "Set the robot on the calibration arena and press enter to start recording frames..."
read input
rhio 10.0.0.1 arucoCalibration

#result=""
#while true ; do
#    nbFrames=$(rhio 10.0.0.1 /moves/arucoCalibration/currentNbFrames)
#    echo -ne "Wait until the robot stops moving and press enter ($nbFrames)"\\r
#    if $(read -t 0.1); then
#        break
#    fi
#done
echo "Wait until the robot stops moving and press enter..."
read input

echo "*** Creating $LOCAL_DIR..."
mkdir $LOCAL_DIR


echo "*** Retrieving the calibration data from the robot"
if scp starkit@10.0.0.1:$ARUCO_DIR $LOCAL_DIR
then
    echo "scp succeeded."
else
    echo "scp failed, find the closest monkey and blame him"
    exit
fi
#echo "*** Deleting the calibration data on the robot"
#ssh starkit@10.0.0.1 rm -rf $ARUCO_DIR

echo "*** Copying the urdf for $host..."
rm $LOCAL_DIR/sigmaban.urdf
if cp $ENV_DIR/sigmaban.urdf $LOCAL_DIR
then
    echo "urdf copied."
else
    echo "cp failed, check that $ENV_DIR/sigmaban.urdf exists"
    exit
fi

echo "*** Starting the optimization"
cd $LOCAL_DIR
parent="$(dirname "$LOCAL_DIR")"
$parent/appCameraModelLearning ./arucoCalibration.csv $host

echo "*** Moving the result to the local robot's environment (on your pc: $ENV_DIR)..."
if cp ./cameraModel.params $ENV_DIR
then
    echo "mv succeeded..."
else
    echo "mv failed, find the closest ape and blame him"
    exit
fi

echo "*** deploy-enving..."
cd $HOME/workspace/
bash deploy-env
#echo "*** Moving the result to the distant robot's environment (on the robot: $robot_home/env/$host/)..."
#if scp ./cameraModel.params starkit@10.0.0.1:$robot_home/env/$host/
#then
#    echo "mv succeeded..."
#else
#    echo "mv failed, find the closest monkey and blame him"
#    exitenvironment
#fi

echo "*** All set. Good luck buddy"

echo ""
